import pytest

from . import mock_redshift
from library.aws.redshift import RedshiftLoggingChecker
from library.aws.utility import Account

region = "us-east-1"

clusters = {
    "cluster1": {
        "Description": "Cluster logging disabled",
        "DBName": "test1",
        "ClusterType": "single-node",
        "NodeType": "ds2.xlarge",
        "MasterUsername": "user1",
        "MasterUserPassword": "testUser1password123",
        "Encrypted": True,
        "PubliclyAccessible": False,
        "CheckShouldPass": True
    }
}


def find_cluster_name(cluster_details):
    for cluster, props in clusters.items():
        if props["ClusterIdentifier"] == cluster_details.name:
            return cluster
    return None


def ident_cluster_test(cluster_details):
    """
    Used to build identification string for each autogenerated test (for easy recognition of failed tests).

    :param cluster_details: dict with information about rules from
                        RedshiftClusterChecker(...)
    :return: identification string with cluster name.
    """

    name = find_cluster_name(cluster_details)
    descr = clusters.get(name, {}).get("Description", "default description")
    return f"params: {name} ({descr})"


def pytest_generate_tests(metafunc):
    """
    Entrypoint for tests (built-in pytest function for dynamic generation of test cases).
    """
    # Launch Redshift mocking and env preparation
    mock_redshift.start()
    test_clusters = mock_redshift.create_env_clusters(clusters, region)

    account = Account(region=region)

    # validate ebs volumes in mocked env
    checker = RedshiftLoggingChecker(account)
    checker.check(clusters=test_clusters)

    # create test cases for each response
    metafunc.parametrize("cluster_details", checker.clusters, ids=ident_cluster_test)


@pytest.mark.redshift_public_access
def test_cluster(cluster_details):
    """
    Actual testing function.

    :param cluster_details: dict with information about rules from
                        RedshiftClusterChecker(...)
    :return: nothing, raises AssertionError if actual test result is not matched with expected
    """
    name = find_cluster_name(cluster_details)
    expected = clusters.get(name, {})["CheckShouldPass"]
    assert expected == (not cluster_details.is_logging)
